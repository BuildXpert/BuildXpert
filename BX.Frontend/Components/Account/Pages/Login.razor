@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using BX.Models
@using System.Diagnostics

@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar Sesión</PageTitle>

<div class="container-fluid vh-100 d-flex justify-content-center align-items-center" style="background-color: #222831;">
    <div class="row w-75 shadow-lg rounded d-flex align-items-center" style="background-color: #ffffff;">
        <!-- Imagen de fondo (oculta en móviles) -->
        <div class="col-md-6 d-none d-md-flex justify-content-center align-items-center">
            <img src="https://i.ibb.co/zLLhRkr/image-2025-02-28-145030625.png" alt="Login Image" class="img-fluid" style="max-width: 70%; height: auto; object-fit: contain;">
        </div>

        <!-- Formulario de Login -->
        <div class="col-md-6 p-5">
            <h2 class="text-center mb-4 text-dark">Bienvenido</h2>

            <StatusMessage Message="@errorMessage" />

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="loginForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="form-floating mb-3">
                    <InputText @bind-Value=Input.Email  id="Email" class="form-control" autocomplete="username" placeholder="Correo electrónico" />
                    <label for="Input.Email">Correo Electrónico</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" /> 
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value=Input.Password type="password" id="Password" class="form-control" autocomplete="current-password" placeholder="Contraseña" />
                    <label for="Input.Password">Contraseña</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox @bind-Value=Input.RememberMe class="form-check-Input" id="rememberMe" />
                    <label class="form-check-label" for="Input.RememberMe">Recordarme</label>
                </div>

                <button type="submit" class="btn btn-dark btn-lg w-100">
                    <i class="fas fa-sign-in-alt"></i> Iniciar Sesión
                </button>

                <div class="text-center mt-3">
                    <a href="Account/ForgotPassword" class="text-decoration-none">¿Olvidaste tu contraseña?</a>
                </div>

                <hr class="my-4">

                <div class="text-center">
                    <p>¿No tienes cuenta? <a href="@NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl })" class="text-decoration-none">Regístrate</a></p>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    private string? errorMessage;
    private bool isRendered;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    [SupplyParameterFromForm]
    private LoginModel Input { get; set; } = new();
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext.User.Identity?.IsAuthenticated ?? false)
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private async Task LoginUser()
    {
        var httpClient = new HttpClient();
        var response = await httpClient.PostAsJsonAsync("https://localhost:7164/AuthUser/Login", Input);
        var result = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
        Console.WriteLine(result);

        if (response.IsSuccessStatusCode)
        {
            var redirectUrl = result["redirectUrl"];
            NavigationManager.NavigateTo(redirectUrl, forceLoad: true);
        }
        else
        {
            errorMessage = result["error"];

        }
    }


}
