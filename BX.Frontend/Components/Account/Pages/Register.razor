@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BX.Models
@using System.Text.Json

@inject IEmailSender<ApplicationUser> EmailSender;
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Registrarse</PageTitle>

<div class="container-fluid vh-100 d-flex justify-content-center align-items-center" style="background-color: #222831;">
    <div class="row w-75 shadow-lg rounded" style="background-color: #ffffff;">
        <!-- Imagen de fondo (oculta en móviles) -->
        <div class="col-md-6 d-none d-md-block p-0">
            <img src="https://i.ibb.co/qM8FQCzG/Grupo-DCI-Logo.jpg" alt="Login Image" class="img-fluid rounded-start" style="height: 100%; object-fit: cover;">
        </div>

        <!-- Formulario de Registro -->
        <div class="col-md-6 p-5">
            <h2 class="text-center mb-4 text-dark">Crear Cuenta</h2>

            <StatusMessage Message="@Message" />

            <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="registerForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <!-- Nombre Completo -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.FullName" id="Input.FullName" class="form-control" placeholder="Nombre Completo" />
                    <label for="Input.FullName">Nombre Completo</label>
                    <ValidationMessage For="() => Input.FullName" class="text-danger" />
                </div>

                <!-- Teléfono -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.PhoneNumber" id="Input.PhoneNumber" class="form-control" placeholder="Teléfono" />
                    <label for="Input.PhoneNumber">Teléfono</label>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                </div>

                <!-- Correo Electrónico -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" placeholder="Correo electrónico" />
                    <label for="Input.Email">Correo Electrónico</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <!-- Contraseña -->
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" placeholder="Contraseña" />
                    <label for="Input.Password">Contraseña</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <!-- Confirmar Contraseña -->
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Confirmar Contraseña" />
                    <label for="Input.ConfirmPassword">Confirmar Contraseña</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-dark btn-lg w-100">
                    <i class="fas fa-user-plus"></i> Registrarse
                </button>

                <div class="text-center mt-3">
                    <p>¿Ya tienes una cuenta? <a href="/Account/Login" class="text-decoration-none">Iniciar Sesión</a></p>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private RegisterUserModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var httpclient = new HttpClient();
        var response = await httpclient.PostAsJsonAsync("https://localhost:7164/AuthUser/Register", Input);

        if (response.IsSuccessStatusCode)
        {

            var result = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();

            if (result != null && result.TryGetValue("callbackUrl", out var redirectedURL))
            {

                var userJson = JsonSerializer.Serialize(result["user"]);
                var user = JsonSerializer.Deserialize<ApplicationUser>(userJson);
                var callbackUrl = redirectedURL.ToString();
                if (user != null && callbackUrl != null)
                {
                    await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
                    RedirectManager.RedirectTo(callbackUrl);
                }
            }
        }
        else
        {
            var errorResult = await response.Content.ReadFromJsonAsync<Dictionary<string, JsonElement>>();
            if (errorResult != null)
            {
                if (errorResult.TryGetValue("identityErrors", out var errorsElement) && errorsElement.ValueKind == JsonValueKind.Array)
                {
                    identityErrors = errorsElement.EnumerateArray()
                        .Select(e => new IdentityError
                            {
                                Code = e.GetProperty("code").GetString() ?? "Unknown",
                                Description = e.GetProperty("description").GetString() ?? "Error desconocido"
                            }).ToList();
                }
                else if (errorResult.TryGetValue("confirmationURL", out var confirmationUrlElement))
                {
                    // Si el servidor responde con una URL de confirmación en un error, redirigir al usuario
                    var confirmationUrl = confirmationUrlElement.GetString();
                    if (!string.IsNullOrEmpty(confirmationUrl))
                    {
                        NavigationManager.NavigateTo(confirmationUrl);
                    }
                }
                else
                {
                    identityErrors = new List<IdentityError>
                {
                    new IdentityError { Code = "GeneralError", Description = "Ocurrió un error inesperado." }
                };
                }
            }
        }

    }
}
