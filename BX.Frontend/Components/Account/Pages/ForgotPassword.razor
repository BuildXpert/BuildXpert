@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BX.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Json

@inject IEmailSender<ApplicationUser> EmailSender;
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<h1>Olvido su Contraseña?</h1>
<h2>Ingrese su Correo Electronico.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="ForgotPasswordSubmit" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="nombre@ejemplo.com" />
                <label for="Input.Email" class="form-label">Correo Electronico</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Resetear Contraseña</button>
        </EditForm>
     </div>
</div>

@code {
    [SupplyParameterFromForm]
    private ForgotPasswordModel Input { get; set; } = new();

    private async Task ForgotPasswordSubmit()
    {
        var httpClient = new HttpClient();
        var response = await httpClient.PostAsJsonAsync("https://localhost:7164/AuthUser/ForgotPassword", Input);
        var result = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();

        if (response.IsSuccessStatusCode)
        {
            var userJson = JsonSerializer.Serialize(result["user"]);
            var user = JsonSerializer.Deserialize<ApplicationUser>(userJson);
            var callbackUrl = result["callbackUrl"].ToString();
            await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
            var passwordConfirmationUrl = result["passwordConfirmationUrl"].ToString();
            NavigationManager.NavigateTo(passwordConfirmationUrl, forceLoad: true);
        }
        else
        {
            var redirectUr = result["urlToReturn"].ToString();
            NavigationManager.NavigateTo(redirectUr, forceLoad: true);

        }
    }

}
